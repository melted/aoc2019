#lang racket

(define (make-code str)
  (define vals (map string->number
                    (string-split (string-trim str) ",")))
  (for/hash ((i (range (length vals)))
             (v vals))
    (values i v)))

(define get-code
  (let ((code (make-code (file->string "data/input17.txt"))))
    (lambda () (hash-copy code))))

(struct vec2 (x y) #:transparent)

(struct state (pc mem runlevel base n pos output input) #:mutable #:transparent)

(define directions (vector (vec2 0 -1) (vec2 0 1) (vec2 -1 0) (vec2 1 0)))

(define (vec2+ v1 v2)
  (vec2 (+ (vec2-x v1) (vec2-x v2))
        (+ (vec2-y v1) (vec2-y v2))))

(define (run st)
  (define code (state-mem st))
  (define (exec pc input)
    (define bop (hash-ref code pc))
    (define op (remainder bop 100))
    (define (mode n)
      (remainder (quotient bop (expt 10 (+ n 1))) 10))
    (define (get n)
      (let ((val (hash-ref code (+ pc n) 0)))
        (case (mode n)
          ((0) (hash-ref code val 0)) 
          ((1) val)
          ((2) (hash-ref code (+ val (state-base st)) 0)))))
    (define (set n x)
      (define addr (hash-ref code (+ pc n)))
      (case (mode n)
        ((0) (hash-set! code addr x))
        ((1) (error "can't set immediate"))
        ((2) (hash-set! code (+ addr (state-base st)) x))))
    (define (jump cd)
      (if (cd (= (get 1) 0))
          (exec (get 2) input)
          (exec (+ pc 3) input)))
    (define (test op)
      (set 3 (if (op (get 1) (get 2)) 1 0))
      (exec (+ pc 4) input))
    (define (do-op f)
      (set 3 (f (get 1) (get 2)))
      (exec (+ pc 4) input))
    (define (handle-input)
      (set 1 (car input))
      (exec (+ pc 2) (cdr input)))
    (define (handle-output)
      (define op (get 1))
      (if (> op 128)
          (displayln op)
          (set-state-output! st (cons (integer->char (get 1)) (state-output st))))
      (exec (+ pc 2) input))
    (set-state-pc! st pc)
    (case op
      ((1) (do-op +))
      ((2) (do-op *))
      ((3) (handle-input))
      ((4) (handle-output))
      ((5) (jump not))
      ((6) (jump (Î» (x) x)))
      ((7) (test <))
      ((8) (test =))
      ((9) (set-state-base! st (+ (state-base st) (get 1)))
           (exec (+ pc 2) input))
      ((99) (state pc code 'halted (state-base st) (state-n st)
                   (state-pos st) (state-output st) input))
      (else (error (format "unknown op ~a" bop)))))
  (exec (state-pc st) (state-input st)))

(define (new-state code)
  (state 0 code 'ready 0 0 (vec2 0 0) '() '()))
  
(define (render state)
  (define str (list->string (reverse (state-output state))))
  (display str))

(define (sum-nexuses state)
  (define (nexus? v x y)
    (define (scaffold? v x y) (char=? (string-ref (vector-ref v y) x) #\#))
    (and (scaffold? v x y) (scaffold? v (- x 1) y) (scaffold? v (+ x 1) y)
         (scaffold? v x (- y 1)) (scaffold? v x (+ y 1))))
  (define v (list->vector (string-split (list->string (reverse (state-output state))))))
  (for*/sum ((x (in-range 1 (- (string-length (vector-ref v 0)) 1)))
             (y (in-range 1 (- (vector-length v) 1))))
    (if (nexus? v x y)
        (* x y)
        0)))

;; (render (run (new-state (get-code) '())))

(define (process-input input)
  (map char->integer (string->list input)))

(define (solve2)
  (define st (new-state (get-code)))
  (define input (process-input "A,B,A,C,A,B,C,C,A,B\nR,8,L,10,R,8\nR,12,R,8,L,8,L,12\nL,12,L,10,L,8\nn\n"))
  (hash-set! (state-mem st) 0 2)
  (set-state-input! st input)
  (run st))