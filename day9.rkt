#lang racket

(define (make-code str)
  (define vals (map string->number
                     (string-split (string-trim str) ",")))
  (for/hash ((i (range (length vals)))
             (v vals))
    (values i v)))

(define get-code
  (let ((code (make-code (file->string "data/input9.txt"))))
    (lambda () (hash-copy code))))

(struct state (pc mem input output runlevel base) #:mutable)

(define (run st)
  (define code (state-mem st))
  (define (exec pc input)
    (define bop (hash-ref code pc))
    (define op (remainder bop 100))
    (define (mode n)
      (remainder (quotient bop (expt 10 (+ n 1))) 10))
    (define (get n)
      (let ((val (hash-ref code (+ pc n) 0)))
        (case (mode n)
           ((0) (hash-ref code val 0)) 
           ((1) val)
           ((2) (hash-ref code (+ val (state-base st)) 0)))))
    (define (set n x)
      (define addr (hash-ref code (+ pc n)))
      (case (mode n)
        ((0) (hash-set! code addr x))
        ((1) (error "can't set immediate"))
        ((2) (hash-set! code (+ addr (state-base st)) x))))
    (define (jump cd)
      (if (cd (= (get 1) 0))
          (exec (get 2) input)
          (exec (+ pc 3) input)))
    (define (test op)
      (set 3 (if (op (get 1) (get 2)) 1 0))
      (exec (+ pc 4) input))
    (define (do-op f)
      (set 3 (f (get 1) (get 2)))
      (exec (+ pc 4) input))
    (define (handle-input)
      (set 1 (car input))
      (exec (+ pc 2) (cdr input)))
    (set-state-pc! st pc)
    (case op
      ((1) (do-op +))
      ((2) (do-op *))
      ((3) (if (null? input)
               (state pc code input (state-output st) 'waiting (state-base st))
               (handle-input)))
      ((4) (displayln (get 1))
           (exec (+ pc 2) input))
      ((5) (jump not))
      ((6) (jump (Î» (x) x)))
      ((7) (test <))
      ((8) (test =))
      ((9) (set-state-base! st (+ (state-base st) (get 1)))
           (exec (+ pc 2) input))
      ((99) (state pc code input (state-output st) 'halted (state-base st)))
      (else (error (format "unknown op ~a" bop)))))
  (exec (state-pc st) (state-input st)))

(run (state 0 (get-code) (list 1) #f 'ready 0))
(run (state 0 (get-code) (list 2) #f 'ready 0))