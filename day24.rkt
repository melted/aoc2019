#lang racket

(define data (filter (Î» (x) (not (char=? x #\newline)))
                     (string->list (file->string "data/input24.txt"))))

(define size (length data))

(define init (for/sum ((i (in-naturals))
                       (c data))
               (if (char=? c #\#) (expt 2 i) 0)))

(define (evolve n)
  (define (neighbors i)
    (+ (if (and (>= (- i 5) 0) (bitwise-bit-set? n (- i 5))) 1 0)
       (if (bitwise-bit-set? n (+ i 5)) 1 0)
       (if (and (>= (- i 1) 0) (not (= 0 (modulo i 5))) (bitwise-bit-set? n (- i 1))) 1 0)
       (if (and (not (= 4 (modulo i 5))) (bitwise-bit-set? n (+ i 1))) 1 0)))
  (for/sum ((i (in-range size)))
    (define ns (neighbors i))
    (define on (bitwise-bit-set? n i))
    (if (or (and on (= ns 1)) (and (not on) (< 0 ns 3)))
        (expt 2 i)
        0)))

(define (solve1)
  (define seen (mutable-set))
  (let loop ((n init))
    (displayln n)
    (if (set-member? seen n)
        n
        (let ((next (evolve n)))
          (set-add! seen n)
          (loop next)))))

(define (render n)
  (for ((i (in-range size)))
    (display (if (bitwise-bit-set? n i) #\# #\.))
    (when (= (modulo i 5) 4) (newline))))

(define (evolve2 n inner outer)
  (define (inner-neighbors i)
    (define (loop start step)
      (for/sum ((i (in-range start (+ start (* 5 step)) step)))
        (if (bitwise-bit-set? inner i) 1 0)))
    (case i
      ((7) (loop 0 1))
      ((11) (loop 0 5))
      ((13) (loop 4 5))
      ((17) (loop 20 1))
      (else 0)))
  (define (outer-neighbors i)
    (+ (if (and (< i 5) (bitwise-bit-set? outer 7)) 1 0)
       (if (and (= (modulo i 5) 0) (bitwise-bit-set? outer 11)) 1 0)
       (if (and (= (modulo i 5) 4) (bitwise-bit-set? outer 13)) 1 0)
       (if (and (> i 19) (bitwise-bit-set? outer 17)) 1 0)))
  (define (neighbors i)
    (+ (if (and (>= (- i 5) 0) (bitwise-bit-set? n (- i 5))) 1 0)
       (if (bitwise-bit-set? n (+ i 5)) 1 0)
       (if (and (>= (- i 1) 0) (not (= 0 (modulo i 5))) (bitwise-bit-set? n (- i 1))) 1 0)
       (if (and (not (= 4 (modulo i 5))) (bitwise-bit-set? n (+ i 1))) 1 0)
       (inner-neighbors i)
       (outer-neighbors i)))
  (for/sum ((i (in-range size))
            #:unless (= i 12))
    (define ns (neighbors i))
    (define on (bitwise-bit-set? n i))
  ;;  (displayln (format "~a ~a" i ns))
    (if (or (and on (= ns 1)) (and (not on) (< 0 ns 3)))
        (expt 2 i)
        0)))

(define (one-round xs)
  (let loop ((todo xs) (current 0) (last 0) (acc '()))
    (if (null? todo)
        (reverse (cons (evolve2 0 0 current) (cons (evolve2 current 0 last) acc)))
        (loop (cdr todo) (car todo) current (cons (evolve2 current (car todo) last) acc)))))

(define (popcount n)
  (for/sum ((i (in-range 25)))
    (if (bitwise-bit-set? n i) 1 0)))
(define (solve2)
  (let loop ((n 0) (state (list init)))
    (if (= n 200)
        (for/sum ((n state)) (popcount n))
        (loop (+ n 1) (one-round state)))))

