#lang racket

(define (make-code str)
  (define vals (map string->number
                    (string-split (string-trim str) ",")))
  (for/hash ((i (range (length vals)))
             (v vals))
    (values i v)))

(define get-code
  (let ((code (make-code (file->string "data/input11.txt"))))
    (lambda () (hash-copy code))))

(struct vec2 (x y) #:transparent)

(struct io (pos dir panel seq) #:mutable #:transparent)
(struct state (pc mem runlevel base io) #:mutable)

(define directions (vector (vec2 0 -1) (vec2 1 0) (vec2 0 1) (vec2 -1 0)))

(define (vec2+ v1 v2)
  (vec2 (+ (vec2-x v1) (vec2-x v2))
        (+ (vec2-y v1) (vec2-y v2))))

(define (render st)
  (define output (for/vector ((i (range 6)))
                   (make-string 60 #\space)))
  (for (((k v) (io-panel (state-io st)))
        #:when (= v 1))
    (string-set! (vector-ref output (vec2-y k)) (vec2-x k) #\O))
  (for-each displayln (vector->list output)))
  
(define (run st)
  (define code (state-mem st))
  (define dev (state-io st))
  (define (exec pc)
    (define bop (hash-ref code pc))
    (define op (remainder bop 100))
    (define (mode n)
      (remainder (quotient bop (expt 10 (+ n 1))) 10))
    (define (get n)
      (let ((val (hash-ref code (+ pc n) 0)))
        (case (mode n)
          ((0) (hash-ref code val 0)) 
          ((1) val)
          ((2) (hash-ref code (+ val (state-base st)) 0)))))
    (define (set n x)
      (define addr (hash-ref code (+ pc n)))
      (case (mode n)
        ((0) (hash-set! code addr x))
        ((1) (error "can't set immediate"))
        ((2) (hash-set! code (+ addr (state-base st)) x))))
    (define (jump cd)
      (if (cd (= (get 1) 0))
          (exec (get 2))
          (exec (+ pc 3))))
    (define (test op)
      (set 3 (if (op (get 1) (get 2)) 1 0))
      (exec (+ pc 4)))
    (define (do-op f)
      (set 3 (f (get 1) (get 2)))
      (exec (+ pc 4)))
    (define (handle-input)
      (set 1 (hash-ref (io-panel dev) (io-pos dev) 0))
      (exec (+ pc 2)))
    (define (handle-output)
      (case (io-seq dev)
        ((0) (hash-set! (io-panel dev) (io-pos dev) (get 1)))
        ((1) (let ((new-dir (modulo (+ (- (* 2 (get 1)) 1) (io-dir dev)) 4)))
               (set-io-dir! dev new-dir)
               (set-io-pos! dev (vec2+ (io-pos dev) (vector-ref directions new-dir))))))
      (set-io-seq! dev (remainder (+ (io-seq dev) 1) 2))
      (exec (+ pc 2)))
    (set-state-pc! st pc)
    (case op
      ((1) (do-op +))
      ((2) (do-op *))
      ((3) (handle-input))
      ((4) (handle-output))
      ((5) (jump not))
      ((6) (jump (Î» (x) x)))
      ((7) (test <))
      ((8) (test =))
      ((9) (set-state-base! st (+ (state-base st) (get 1)))
           (exec (+ pc 2)))
      ((99) (state pc code 'halted (state-base st) (state-io st)))
      (else (error (format "unknown op ~a" bop)))))
  (exec (state-pc st)))

(define (new-state code)
  (state 0 code 'ready 0 (io (vec2 0 0) 0 (make-hash) 0)))

(hash-count (io-panel (state-io (run (new-state (get-code))))))

(define (solve2)
  (define init (new-state (get-code)))
  (hash-set! (io-panel (state-io init)) (vec2 0 0) 1)
  (let ((out-state (run init)))
    (render out-state)))

(solve2)
